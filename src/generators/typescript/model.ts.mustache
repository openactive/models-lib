// This file was generated
import * as Joi from 'joi';
import { OaValidationError } from '../oaValidationError';
import { oa, schema } from '..';

/**
 * {{modelType}}
{{#classDoc}}
 *
 * {{{ . }}}
{{/classDoc}}
 */
export type Type = {
  '@type': '{{{ modelTypePropName }}}';
{{#fieldList}}
  {{#if description }}
  /**
  {{#each description}}
   * {{{ . }}}
  {{/each}}
  {{#if codeExample }}
   *
  {{#each codeExample }}
   * {{{ . }}}
  {{/each }}
  {{/if }}
   */
  {{/if }}
  {{{ renderPropName propName }}}?: {{{ propertyTsType }}};
{{/fieldList}}
}

/* unfortunately, it must be given this generic type `ObjectSchema<any>` because these schemas can sometimes be
recursively defined, which causes a type error due to potentially infinite nesting of generic params */
/**
 * {{{ modelType }}} - Validation schema (w/ JOI)
{{#classDoc}}
 *
 * {{{ . }}}
{{/classDoc}}
 */
export const JoiSchema: Joi.ObjectSchema<any> = Joi.object({
  '@type': Joi.string().valid('{{{ modelTypePropName }}}').required(),
{{#fieldList}}
  {{{ renderPropName propName }}}: {{{ propertyJoiType }}},
{{/fieldList}}
});

/**
 * Runtime validator for {{{ modelType }}}.
 *
 * If some data has a structure which matches a {{{ modelType }}}, it will be returned with the correct type.
 * Otherwise, this function returns an OAValidationError with details about why the data does not match.
 *
 * Use this to e.g. check a JSON object received in an HTTP request. Example usage (for an express request handler):
 *
 * ```ts
 * const maybe{{{ className }}} = {{{ className }}}.validate(req.body); // `req.body` will have type `any` or `unknown`
 * if (maybe{{{ className }}} instanceof OaValidationError) {
 *   // From this point on, `maybe{{{ className }}}` will have type `OaValidationError`
 *   const error = maybe{{{ className }}};
 *   // Do something with the error. Maybe ignore it? Or log it? Or throw? Up to you.
 * }
 * // From this point on, `maybe{{{ className }}}` will have type `{{{ className }}}.Type`
 * const {{{ classNameFirstLetterLowercased }}} = maybe{{{ className }}};
 * ```
 */
export function validate(maybe{{{ className }}}: unknown): Type | OaValidationError {
  const { value, error } = JoiSchema.validate(maybe{{{ className }}});
  if (error) {
    return new OaValidationError('{{{ className }}}', maybe{{{ className }}}, error);
  }
  /* Joi does not implement TS Type Guards, so TS does not implicitly know that this has now been validated
  to have the right type. Therefore, we just cast it to `any`. */
  return value as any;
}
